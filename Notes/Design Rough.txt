User selects X Symptoms
Iterate through Supplement Array, summing value of targeted symptoms, creating a new temp 'results' array with the Supplement Name and the sum value.
Order list by Sum Value
Cut list down to top three
Display resutls accordingly


array const symptomIndex [Template - only one in entire app]
[
["Energy", "[link to picture]"],
["Digestion", "[link to picture]"],
["Mood", "[link to picture]"],
["Headaches", "[link to picture]"],
["Foggy Brain", "[link to picture]"],
["Bone Problems", "[link to picture]"],
["Allergies", "[link to picture]"],
["Sugar Cravings", "[link to picture]"],
["Heart Trouble", "[link to picture]"],
["Recurring Flu / Colds", "[link to picture]"],
["Romantic Health", "[link to picture]"],
["General Nutrition", "[link to picture]"],
]


Class User [Multiple per App, stored in LocalStorage]
{
name: , "",
selectedSymptoms, ["","",""],
returnedSupplements, [{},{},{}],
checkoutTotal, decimal
}

var currentUser = new User();

array userIndex [One per app, read from and added to]
[
{User1},
{User2},
...
{UserN}
]



Class Supplement ( x 24) [Put in separate document, initialize supplementIndex at the top in index.html, array.push each to supplementIndex]
{
name
link
picture
description
price
symptoms
  {
  "Energy" : int [effectiveness rating],
  "Digestion" : ,
  "Mood" : ,
  "Headaches" : ,
  "Foggy Brain" : ,
  "Bone Problems" : ,
  "Allergies" : ,
  "Sugar Cravings" : ,
  "Heart Trouble" : ,
  "Recurring Flu / Colds" : ,
  "Romantic Health" : ,
  "General Nutrition" :
  }
}

array const supplementIndex [Another Template - only one in entire app]
[
{Supplement1},
{Supplement2},
...
{SupplementN}
]



(?) CheckHealth(): [Function at top of page which valid-checks all variables and displays a few messages indicating status]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
WORKFLOW
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[//
Class User - *initialize*
userIndex = localStorage.userIndex | [];
Class Supplement - *initialize*
supplementIndex = *populate with bulk code block, write to localStorage*
symptomIndex = *definition, write to localStorage*
currentUser = null;
//]

TODO: Eliminate 'username' and 'sign out' buttons, move title to far right.

[//
User enters their information and selects a button. Blank fields returns alert.
1a) Sign Up: Checks userIndex: Already-existing user returns alert, clears fields.
1b) Sign Up: Checks userIndex: New user creates new user object with provided name and password, installs into currentUser object, saves to userIndex, and proceeds to 'symptoms' page.
2a) Sign In: Checks userIndex: Existing username but incorrect password returns Alert.
2b) Sign In: Checks userIndex: Existing username with correct password writes existing user in localStorage into currentUser object, proceeds to 'symptoms' page.
//]


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[//
symptomIndex - retrieve from localStorage
supplementIndex - retrieve from localStorage
 Null or malpopulated symptomIndex[] or supplementIndex[] log critical error, return to index.html.
currentUser - retrieve from localStorage
 Name, Password must be populated...
 ...Other fields must be blanked out.
 Null or malpopulated currentUser will log critical error, redirect to Home page.
//]

[ONLOAD] Username = currentUser.name
Clicking the "Sign Out" button will save currentUser into userIndex array, return to index.html.

[//

[ONLOAD - event]User clicks symptoms tiles to select the tile's symptom.
  Selected tiles change color to indicate that they're selected.
  Selected tiles clicked again will de-select them.
  If three tiles are 'selected', further attempts to select a tile will fail.

  Whilst three tiles are selected, the 'Proceed' button will be lit-up.

When the proceed button is pressed, the heart of TDM's processing will occur:
- Place the "Symptom" page's tiles' html "Symptom Name" headings of the selected tiles are in the currentUser.selectedSymptoms string array.
- (Check) Check all three strings in currentUser.selectedSymptoms against the first value in each cell of the 'Symptom' array. Any failure here should be logged, and the datasets repaired.
- Create a temporary array called 'suppSuggentTemp'.
- Iterate over each Supplement in the supplementIndex array - within each supplement:
  > Sum the 'effectiveness rating' values of the keys matching the three selected symptoms in currentUser.selectedSymptoms.
  > Take the supplement.name, and the sum produced in the last step, and push those two values as an array pair to suppSuggestTemp[]
- Once the iteration in the past step is complete, sort suppSuggestTemp by the 'effectiveness rating' sum, descending.
- Clip the array to the top three results. Ties may be selected arbitrarily.
- Iterate over the supplements array once again, write the three supplement objects into the current user's user.returnedSupplements array, matching suppSuggestTemp.name to supplement.name
- Iterate over the user.ReturnedSupplements array, summing the supplements objects' price, and writing that value to user.checkoutTotal.
- Save currentUser to localStorage.

Site proceeds to 'Results' page.

//]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[//
currentUser - retrieve from localStorage
 Name, Password, returnedSupplements, checkoutTotal must be populated. State of selectedSymptoms is irrelevant.
 Null or malpopulated currentUser will log critical error, redirect to Home page.
//]

Results Page:

Username = currentUser.name
Clicking the "Sign Out" button will return to index.html.

Pageload iterates over user's user.returnedSupplements list, rendering a nice fat graphical element (three total) across the page, showing the name, picture, description, and external link of each supplement.
(Later) Page also displays a 'Total Price' at the top.
Clicking "Restart Button" proceeds back to the 'Symptom' page.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------